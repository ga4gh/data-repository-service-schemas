# -*- coding: utf-8 -*-
import os.path
import unittest

import swagger_spec_validator
import yaml


class TestPackage(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cwd = os.path.dirname(os.path.realpath(__file__))
        spec_dir = os.path.join(cwd, '../../openapi')
        cls.swagger_path = os.path.join(spec_dir, 'data_object_service.swagger.yaml')

    def test_version_consensus(self):
        from ga4gh.dos import __version__
        with open(self.swagger_path, 'r') as f:
            spec_version = yaml.safe_load(f)['info']['version']
        assert __version__ == spec_version

    def test_schema_validity(self):
        """Validate the schema using swagger_spec_validator."""
        path = os.path.abspath(self.swagger_path)
        swagger_spec_validator.validate_spec_url('file://' + path)

    def test_chalice_schema_generation(self):
        """
        Validate that the schema generated by :func:`ga4gh.dos.schema.from_chalice_routes`
        is valid.
        """
        from ga4gh.dos.schema import from_chalice_routes
        routes = {
            # Test a path that does not exist in the schema
            '/PathThatDoesNotExist': {'GET': None},
            # Test a valid path with a nonexistent method
            '/ga4gh/dos/v1/databundles': {'MethodThatDoesNotExist': None},
            # Test a path with a different case than what is defined in the schema
            '/GA4GH/DOS/V1/DATABUNDLES/{data_bundle_id}': {'GET': None},
            # Test multiple methods
            '/ga4gh/dos/v1/dataobjects/{data_object_id}': {'GET': None,
                                                           'PUT': None}
        }
        schema = from_chalice_routes(routes, base_path='/ga4gh/dos/v1')
        paths = schema['paths']

        self.assertNotIn('/PathThatDoesNotExist', paths.keys())
        # Test that base path is correctly stripped
        self.assertNotIn('/ga4gh/dos/v1/databundles', paths.keys())
        self.assertIn('/databundles/{data_bundle_id}', paths.keys())
        self.assertNotIn('MethodThatDoesNotExist', paths['/databundles'].keys())
        self.assertIn('get', paths['/dataobjects/{data_object_id}'].keys())
        self.assertIn('put', paths['/dataobjects/{data_object_id}'].keys())
        self.assertNotIn('/dataobjects', paths.keys())
        # Make sure that the schema is intact
        self.assertIn('200', paths['/dataobjects/{data_object_id}']['get']['responses'].keys())
